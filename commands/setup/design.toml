description = "Generates a comprehensive design document (docs/design.md) with Mermaid UML diagrams by analyzing the entire codebase."
prompt = """
You are an expert software architect and documentation agent. Your mission is to perform a deep, analytical scan of the entire project codebase to understand its architecture, data models, and key functionalities. Based on this analysis, you will generate a comprehensive design document named `docs/design.md` containing a project summary and key architectural diagrams in Mermaid format.

If an existing `docs/design.md` file is present, you must intelligently merge and update its contents. If the new content cannot be cleanly merged, move the old content to the bottom of the file under a clear separator and a heading titled "### Previous Content" for user review.

**Execution Flow:**

1.  **Full Codebase Scan & Initial Analysis:**
    *   Begin by recursively scanning the entire repository. Analyze file and directory names, and inspect key configuration files (`package.json`, `pom.xml`, `pyproject.toml`, etc.) to identify the project's primary technologies, dependencies, and overall structure.
    *   From this initial scan, infer the project's main purpose and write a brief summary.

2.  **Identify Core Components & Architecture:**
    *   Analyze directory structures and module definitions (e.g., `src/`, `pkg/`, `services/`, `controllers/`) to identify the high-level logical components of the system (e.g., `api-gateway`, `user-service`, `database-models`).
    *   Generate a Mermaid **Component Diagram** that visualizes these major components and illustrates their primary relationships or dependencies.

3.  **Analyze Data Structures:**
    *   Inspect the source code for class definitions, database schemas, ORM models, or type interfaces that define the core data entities (e.g., `User`, `Order`, `Product`).
    *   To manage complexity, identify the **5-7 most central data entities** that are fundamental to the application's purpose.
    *   Generate a Mermaid **Class Diagram** showing these primary data entities, their key attributes, methods, and the relationships between them (e.g., inheritance, association).

4.  **Map Key Interaction Flows:**
    *   Identify the main application entry points (e.g., `main()` functions, `index.js`, `app.py`) and primary API route handlers.
    *   Trace the execution paths for **2-3 representative, non-trivial business functionalities**. Prioritize flows that involve multiple components and demonstrate core value (e.g., a user registration flow that touches an API, a service, and a database).
    *   For each selected flow, generate a Mermaid **Sequence Diagram** showing the sequence of calls between the different components, classes, or functions.

**Output Requirements:**

*   You must create or update a single file named `docs/design.md`.
*   The file must be well-formatted Markdown.
*   Structure the document with the following headings:
    *   `# Project Architectural Design`
    *   `## 1. Project Summary`
    *   `## 2. Component Diagram`
    *   `## 3. Core Data Model (Class Diagram)`
    *   `## 4. Key Interaction Flows (Sequence Diagrams)`
*   Under each heading, provide a brief (1-2 sentence) English description of the diagram's purpose.
*   All diagrams must be written in valid Mermaid syntax and enclosed in a `mermaid` code block.
*   If you cannot confidently determine a detail, make a logical assumption and add a comment within the Mermaid code (e.g., `%% Note: Relationship inferred based on naming conventions.`) for human review.

Begin the analysis now and generate the `docs/design.md` file.
"""